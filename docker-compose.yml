version: "3.7"

services:
  debezium-iceberg:
    image: ghcr.io/memiiso/debezium-server-iceberg:latest
    container_name: debezium-server-iceberg
    networks:
      iceberg_net:
    depends_on:
      - iceberg-rest
      - minio
      - postgresqlsourcedb
      - mc
    volumes:
      - ./conf/application.properties:/app/conf/application.properties
    environment:
      - AWS_ACCESS_KEY_ID=demo
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
#    links:
#      - jdbccatalog
#      - minio
#      - postgresqlsourcedb
  postgresqlsourcedb:
    image: debezium/example-postgres:2.5
    container_name: postgresql-source-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_INITDB_ARGS="-E UTF8"
      - LANG=en_US.utf8
    networks:
      iceberg_net:
    ports:
      - "5432:5432"
  # jdbccatalog:
  #   image: postgres:14-alpine
  #   container_name: iceberg-jdbc-catalog
  #   networks:
  #     iceberg_net:
  #   ports:
  #     - "5433:5432"
  #   environment:
  #     - POSTGRES_DB=test
  #     - POSTGRES_USER=testuser
  #     - POSTGRES_PASSWORD=testpass
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=demo
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
      - MINIO_BUCKET=warehouse
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    depends_on:
      - minio
    environment:
      - AWS_ACCESS_KEY_ID=demo
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 demo password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing minio/warehouse;
      /usr/bin/mc anonymous set public minio/warehouse;
      exit 0;
      "
  iceberg-rest:
    image: apache/iceberg-rest-fixture:latest
    container_name: iceberg-rest
    ports:
      - "8181:8181"
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=demo
      - AWS_SECRET_ACCESS_KEY=password
      - CATALOG_WAREHOUSE=s3a://warehouse
      - CATALOG_IO__IMPL=org.apache.iceberg.io.ResolvingFileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
    networks:
      iceberg_net:
    # depends_on:
    #   iceberg-pg-catalog:
    #     condition: service_healthy
    #     restart: true
  # iceberg-pg-catalog:
  #   image: postgres:14-alpine
  #   container_name: iceberg_pg_catalog
  #   environment:
  #     - POSTGRES_USER=iceberg
  #     - POSTGRES_PASSWORD=iceberg
  #     - POSTGRES_DB=iceberg-catalog
  #   healthcheck:
  #     test:
  #       - CMD
  #       - pg_isready
  #       - -U
  #       - iceberg
  #     interval: 5s
  #     retries: 5
  #   ports:
  #     - 5433:5432
  #   volumes:
  #     - iceberg_pg_catalog_data:/var/lib/postgresql/data
  #   networks:
  #     iceberg_net:
  trino:
    image: trinodb/trino:468
    container_name: trino
    ports:
      - 8081:8080
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=demo
      - AWS_SECRET_ACCESS_KEY=password
      - S3_ENDPOINT=http://minio:9000
      - LAKEHOUSE_NAME=warehouse
    volumes:
      - ./etc:/etc/trino
    networks:
      iceberg_net:
    depends_on:
      - minio
networks:
  iceberg_net:
    name: icebergnet
volumes:
  minio_data: null
  iceberg_pg_catalog_data: null